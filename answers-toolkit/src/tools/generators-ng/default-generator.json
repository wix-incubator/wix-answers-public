{
	"type": "folder",
	"name": "${lispCaseName}",
	"files": [
		{
			"type": "file",
			"name": "_style.scss",
			"content": [
				".${lispCaseName} {",
				"\tcolor: pink;",
				"\t&:after {",
				"\t\tcontent: 'Unstyled!';",
				"\t\tfont-size: 50px;",
				"\t}",
				"}",
				""
			]
		},
		{
			"type": "file",
			"name": "index.tsx",
			"content": [
				"import * as React from 'react';",
				"import { devTranslations, TranslateFn, AnsViewComp } from 'answers-app-common';",
				"import { Text } from 'answers-ui-libby';",
				"",
				"export type ${camelCaseName}Props = {",
				"\t// in",
				"\tvalue: string;",
				"\t// out",
				"\tonChange: (value: string) => void;",
				"};",
				"",
				"const translationPrefix = `${translationNs}.${lispCaseName}`;",
				"",
				"devTranslations({",
				"\t\"${translationNs}.${lispCaseName}.title\": \"This is ${camelCaseName}!\"",
				"});",
				"",
				"export type ${camelCaseName}State = {};",
				"",
				"export class ${camelCaseName} extends AnsViewComp<${camelCaseName}Props, ${camelCaseName}State> {",
				"",
				"\tstate: ${camelCaseName}State = {};",
				"",
				"\ttp: TranslateFn = (key, params) => {",
				"\t\treturn this.props.t(`${translationPrefix}.${key}`, params);",
				"\t}",
				"",
				"\trender () {",
				"\t\tconst {props, state, tp} = this;",
				"",
				"\t\treturn (",
				"\t\t\t<div className='${lispCaseName}'>",
				"\t\t\t\t<pre><code>{JSON.stringify(props)}</code></pre>",
				"\t\t\t\t<pre><code>{JSON.stringify(state)}</code></pre>",
				"\t\t\t\t<Text type='t1a'>{tp('title')}</Text>",
				"\t\t\t</div>",
				"\t\t);",
				"\t}",
				"}",
				""
			]
		},
		{
			"type": "file",
			"name": "spec.tsx",
			"content": [
				"import { assert } from 'chai';",
				"import { testViewCompPropsCreator, renderAndMountComp } from 'answers-app-core';",
				"import { reactUniDriver } from 'unidriver';",
				"import { ${camelCaseName}, ${camelCaseName}Props } from './';",
				"import { create${camelCaseName}Driver } from './driver';",
				"",
				"const propsCreator = testViewCompPropsCreator<${camelCaseName}Props>(() => ({",
				"\tvalue: 'bob',",
				"\tonChange: () => null",
				"}));",
				"",
				"const setup = (partialProps: Partial<${camelCaseName}Props>) => {",
				"\tconst props = propsCreator(partialProps);",
				"\tconst elem = renderAndMountComp<${camelCaseName}Props>(${camelCaseName}, props);",
				"\tconst baseDriver = reactUniDriver(elem);",
				"\treturn create${camelCaseName}Driver(baseDriver);",
				"};",
				"",
				"describe('${camelCaseName}', () => {",
				"\tit('shows the title', async () => {",
				"\t\tconst driver = setup({});",
				"\t\tassert.equal(await driver.text(), 'Dod shel gever');",
				"\t});",
				"});",
				""
			]
		},
		{
			"type": "file",
			"name": "driver.tsx",
			"content": [
				"import { UniDriver } from 'unidriver';",
				"import { ${camelCaseName}Key } from './';",
				"",
				"export type ${camelCaseName}Driver = {",
				"\ttext: () => Promise<string>,",
				"\tbase: UniDriver",
				"};",
				"",
				"export const create${camelCaseName}Driver = (wrapper: UniDriver): ${camelCaseName}Driver => {",
				"\tconst base = wrapper.$(`.${${camelCaseName}Key}`);",
				"\treturn {",
				"\t\ttext: () => base.$('.title').text(),",
				"\t\tbase",
				"\t};",
				"};",
				""
			]
		}
	]
}
